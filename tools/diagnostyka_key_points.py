#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Narzƒôdzie diagnostyczne dla systemu punkt√≥w specjalnych (key_points)
"""

import json
import os
import sys

# Dodaj ≈õcie≈ºkƒô do g≈Ç√≥wnego katalogu projektu
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from engine.engine import GameEngine
from engine.player import Player
from core.ekonomia import EconomySystem

def diagnose_key_points_system():
    """Kompleksowa diagnostyka systemu key_points"""
    
    print("=" * 60)
    print("DIAGNOSTYKA SYSTEMU PUNKT√ìW SPECJALNYCH (KEY_POINTS)")
    print("=" * 60)
    
    # 1. Sprawd≈∫ plik mapy
    print("\n1. SPRAWDZANIE PLIKU MAPY")
    print("-" * 30)
    
    map_path = "data/map_data.json"
    if not os.path.exists(map_path):
        print(f"‚ùå B≈ÅƒÑD: Plik mapy nie istnieje: {map_path}")
        return
    
    print(f"‚úÖ Plik mapy istnieje: {map_path}")
    
    try:
        with open(map_path, 'r', encoding='utf-8') as f:
            map_data = json.load(f)
        print("‚úÖ Plik mapy zosta≈Ç poprawnie za≈Çadowany")
    except Exception as e:
        print(f"‚ùå B≈ÅƒÑD wczytywania pliku mapy: {e}")
        return
    
    # Sprawd≈∫ key_points w pliku mapy
    key_points = map_data.get('key_points', {})
    if not key_points:
        print("‚ùå BRAK key_points w pliku mapy!")
        print("üí° Dodaj key_points do data/map_data.json w formacie:")
        print('   "key_points": {')
        print('     "10,-4": {"type": "miasto", "value": 50},')
        print('     "15,2": {"type": "fortyfikacja", "value": 30}')
        print('   }')
        return
    
    print(f"‚úÖ Znaleziono {len(key_points)} punkt√≥w specjalnych:")
    for hex_id, point_data in key_points.items():
        print(f"   - {hex_id}: {point_data}")
    
    # 2. Sprawd≈∫ inicjalizacjƒô GameEngine    print("\n2. SPRAWDZANIE GAMEENGINE")
    print("-" * 30)
    
    try:
        game_engine = GameEngine(
            map_path="data/map_data.json",
            tokens_index_path="assets/tokens/index.json",
            tokens_start_path="assets/start_tokens.json",
            seed=42,
            read_only=True  # Zapobiega nadpisywaniu pliku mapy
        )
        print("‚úÖ GameEngine zosta≈Ç zainicjalizowany")
    except Exception as e:
        print(f"‚ùå B≈ÅƒÑD inicjalizacji GameEngine: {e}")
        return
    
    # Sprawd≈∫ key_points_state
    if hasattr(game_engine, 'key_points_state'):
        print(f"‚úÖ key_points_state istnieje: {len(game_engine.key_points_state)} punkt√≥w")
        for hex_id, state in game_engine.key_points_state.items():
            print(f"   - {hex_id}: {state}")
    else:
        print("‚ùå BRAK key_points_state w GameEngine!")
        return
    
    # Sprawd≈∫ board.key_points
    if hasattr(game_engine.board, 'key_points'):
        print(f"‚úÖ board.key_points istnieje: {len(game_engine.board.key_points)} punkt√≥w")
        for hex_id, point_data in game_engine.board.key_points.items():
            print(f"   - {hex_id}: {point_data}")
    else:
        print("‚ùå BRAK board.key_points!")
    
    # 3. Sprawd≈∫ ≈ºetony
    print("\n3. SPRAWDZANIE ≈ªETON√ìW")
    print("-" * 30)
    
    print(f"‚úÖ Za≈Çadowano {len(game_engine.tokens)} ≈ºeton√≥w")
    
    tokens_with_positions = [t for t in game_engine.tokens if t.q is not None and t.r is not None]
    print(f"‚úÖ ≈ªetony z pozycjami: {len(tokens_with_positions)}")
    
    # Sprawd≈∫, kt√≥re ≈ºetony stojƒÖ na key_points
    tokens_on_key_points = []
    for token in tokens_with_positions:
        hex_id = f"{token.q},{token.r}"
        if hex_id in game_engine.key_points_state:
            tokens_on_key_points.append((token, hex_id))
    
    print(f"‚úÖ ≈ªetony na punktach specjalnych: {len(tokens_on_key_points)}")
    for token, hex_id in tokens_on_key_points:
        print(f"   - ≈ªeton {token.id} ({token.owner}) na {hex_id}")
    
    # 4. Sprawd≈∫ graczy
    print("\n4. SPRAWDZANIE GRACZY")
    print("-" * 30)
    
    # Stw√≥rz testowych graczy
    players = [
        Player(1, "Polska", "Genera≈Ç", 5, "test.png"),
        Player(2, "Polska", "Dow√≥dca", 5, "test.png"),
        Player(3, "Polska", "Dow√≥dca", 5, "test.png"),
        Player(4, "Niemcy", "Genera≈Ç", 5, "test.png"),
        Player(5, "Niemcy", "Dow√≥dca", 5, "test.png"),
        Player(6, "Niemcy", "Dow√≥dca", 5, "test.png"),
    ]
    
    # Dodaj systemy ekonomii
    for p in players:
        p.economy = EconomySystem()
    
    game_engine.players = players
    
    generals = [p for p in players if p.role.lower() == 'genera≈Ç']
    print(f"‚úÖ Znaleziono {len(generals)} genera≈Ç√≥w:")
    for general in generals:
        print(f"   - {general.nation} Genera≈Ç (id={general.id}), punkty: {general.economy.economic_points}")
    
    # 5. Symuluj process_key_points
    print("\n5. SYMULACJA PROCESS_KEY_POINTS")
    print("-" * 30)
    
    print("üîÑ Wywo≈Çujƒô process_key_points...")
    
    # Zapisz stan przed
    before_state = {}
    for general in generals:
        before_state[general.id] = general.economy.economic_points
    
    try:
        game_engine.process_key_points(players)
        print("‚úÖ process_key_points wykonane bez b≈Çƒôd√≥w")
    except Exception as e:
        print(f"‚ùå B≈ÅƒÑD w process_key_points: {e}")
        import traceback
        traceback.print_exc()
        return
    
    # Sprawd≈∫ zmiany
    print("\n6. ANALIZA WYNIK√ìW")
    print("-" * 30)
    
    changes_detected = False
    for general in generals:
        before = before_state[general.id]
        after = general.economy.economic_points
        if after != before:
            print(f"‚úÖ {general.nation} Genera≈Ç: {before} ‚Üí {after} (+{after-before})")
            changes_detected = True
        else:
            print(f"‚ùå {general.nation} Genera≈Ç: {before} ‚Üí {after} (brak zmian)")
    
    if not changes_detected:
        print("\n‚ùå BRAK ZMIAN W PUNKTACH EKONOMICZNYCH!")
        print("üîç Mo≈ºliwe przyczyny:")
        print("   1. ≈ªaden ≈ºeton nie stoi na punktach specjalnych")
        print("   2. B≈ÇƒÖd w identyfikacji w≈Ça≈õcicieli ≈ºeton√≥w")
        print("   3. B≈ÇƒÖd w mapowaniu nacji do genera≈Ç√≥w")
        print("   4. Punkty specjalne majƒÖ warto≈õƒá 0")
    else:
        print("\n‚úÖ SYSTEM PUNKT√ìW SPECJALNYCH DZIA≈ÅA POPRAWNIE!")
    
    # 7. Szczeg√≥≈Çowa analiza problemu
    print("\n7. SZCZEG√ì≈ÅOWA ANALIZA")
    print("-" * 30)
    
    if tokens_on_key_points:
        print("üîç Analiza ≈ºeton√≥w na punktach specjalnych:")
        
        for token, hex_id in tokens_on_key_points:
            print(f"\n   ≈ªeton {token.id} na {hex_id}:")
            print(f"     - Owner: '{token.owner}'")
            
            # WyciƒÖgnij nacjƒô z ownera
            if hasattr(token, 'owner') and token.owner:
                try:
                    nation = token.owner.split("(")[-1].replace(")", "").strip()
                    print(f"     - WyciƒÖgniƒôta nacja: '{nation}'")
                    
                    # Znajd≈∫ genera≈Ça dla tej nacji
                    general = None
                    for p in players:
                        if p.nation == nation and p.role.lower() == 'genera≈Ç':
                            general = p
                            break
                    
                    if general:
                        print(f"     - Znaleziony genera≈Ç: {general.nation} (id={general.id})")
                        
                        # Sprawd≈∫ key_point
                        kp = game_engine.key_points_state.get(hex_id)
                        if kp:
                            print(f"     - Key point: {kp}")
                            give = int(0.1 * kp['initial_value'])
                            if give < 1:
                                give = 1
                            if kp['current_value'] > 0:
                                print(f"     - Powinien dostaƒá: {give} punkt√≥w")
                            else:
                                print(f"     - Punkt wyczerpany (current_value: {kp['current_value']})")
                        else:
                            print(f"     - B≈ÅƒÑD: brak key_point dla {hex_id}")
                    else:
                        print(f"     - B≈ÅƒÑD: nie znaleziono genera≈Ça dla nacji '{nation}'")
                        print(f"     - Dostƒôpni genera≈Çowie: {[p.nation for p in generals]}")
                        
                except Exception as e:
                    print(f"     - B≈ÅƒÑD wyciƒÖgania nacji: {e}")
            else:
                print(f"     - B≈ÅƒÑD: brak ownera")
    else:
        print("‚ùå ≈ªaden ≈ºeton nie stoi na punktach specjalnych!")
        print("üí° Przesu≈Ñ ≈ºeton na heks z punktem specjalnym i spr√≥buj ponownie")
    
    print("\n" + "=" * 60)
    print("KONIEC DIAGNOSTYKI")
    print("=" * 60)

if __name__ == "__main__":
    diagnose_key_points_system()
